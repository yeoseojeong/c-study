//A

#include <stdio.h>
 
int bitCount(unsigned int* data, int n)
{
    int totalCount = 0;
    n = (n + 3) / 4;
 
    for (int i = 0; i < n; ++i) {
        unsigned int currentValue = data[i];
 
        for (int j = 0; j < 32; ++j) {
            totalCount += (currentValue >> j) & 1;
        }
    }
 
    return totalCount;
}
 
int main()
{
    int n;
    unsigned char data[100] = { 0 };
 
    scanf("%d", &n);
    for (int i = 0; i < n; i++)
    {
        scanf("%hhu", data + i);
    }
 
    int cnt = bitCount((unsigned int*)data, n);
 
    printf("%d", cnt);
 
    return 0;
}



//B

#include <stdio.h>

void reverse_3_byte(unsigned char* dp)
{
    // ================== 코드 작성 영역 ==================

    for (int i = 0; i < 12 / 3 / 2; i++)
    {
        int idx = i * 3;
        int idx2 = 12 - 3 - idx; //맨뒤에서부터 3칸씩 이동
        for (int j = 0; j < 3; j++)
        {
            int temp = dp[idx + j];
            dp[idx + j] = dp[idx2 + j];
            dp[idx2 + j] = temp;
        }

        // ===================================================
    }
}
    int main(int argc, char const* argv[])
    {
        unsigned int data[3] = { 0 };

        for (int i = 0; i < 3; i++)
        {
            scanf("%u", data + i);
        }

        reverse_3_byte((unsigned char*)data);

        for (int i = 0; i < 3; i++)
        {
            printf("%u ", data[i]);
        }

        return 0;
    }


//C

#include <stdio.h>
 
// ================== 코드 작성 영역 ==================
 
void shiftRL(unsigned int(*data)[2], int x) {
    for (int i = 0; i < 10; ++i) {
        for (int j = 0; j < 2; ++j) {
            if (j % 2 == 0) 
            {
                data[i][j] >>= x;
            }
            else
            {
                data[i][j] <<= x;
            }
        }
    }
}
 
// ===================================================
 
int main(int argc, char const* argv[])
{
    unsigned int data[20] = { 0 };
    int x;
 
    for (size_t i = 0; i < 20; i++)
    {
        scanf("%d", data + i);
    }
    scanf("%d", &x);
 
    shiftRL((unsigned int(*)[2])data, x);
 
    for (size_t i = 0; i < 20; i++)
    {
        printf("%u ", data[i]);
    }
 
    return 0;
}


//D

#include <stdio.h>
 
unsigned int rotateRight(unsigned int n, int x)
{
    x %= 32; 
 
   
    return (n >> x) | (n << (32 - x));
}
 
int main()
{
    unsigned int n;
    int x;
 
    scanf("%u", &n);
    scanf("%d", &x);
 
    unsigned int result = rotateRight(n, x);
 
    printf("%u\n",result);
 
    return 0;
}


//E

#include <stdio.h>
 
void insert_str(char* str, const char* istr, int pos)
{
    int len_str = 0;
    int len_istr = 0;
 
    while (str[len_str] != '\0') {
        len_str++;
    }
 
    while (istr[len_istr] != '\0') {
        len_istr++;
    }
 
    for (int i = len_str; i >= pos; i--) {
        str[i + len_istr] = str[i];
    }
 
    for (int i = 0; i < len_istr; i++) {
        str[pos + i] = istr[i];
    }
}
 
int main(int argc, char const* argv[])
{
    char str[201] = { 0 };
    char istr[101] = { 0 };
    int pos;
 
    scanf("%s", str);
    scanf("%s", istr);
    scanf("%d", &pos);
 
    insert_str(str, istr, pos);
 
    printf("%s", str);
 
    return 0;
}


//F

#include <stdio.h>
 
int str2cmp(char(*str)[101])
{
    int i = 0;
    while (str[0][i] != '\0' && str[1][i] != '\0')
    {
        if (str[0][i] < str[1][i]) {
            return -1;
        }
        else if (str[0][i] > str[1][i])
        {
            return 1; 
        }
        i++;
    }
 
    if (str[0][i] == '\0' && str[1][i] != '\0') 
    {
        return -1; 
    }
    else if (str[0][i] != '\0' && str[1][i] == '\0') 
    {
        return 1; 
    }
 
    return 0; 
}
 
int main(int argc, char const* argv[])
{
    char str[2][101];
 
    for (int i = 0; i < 2; i++) {
        scanf("%100s", str[i]);
    }
 
    printf("%d\n", str2cmp(str));
 
    return 0;
}


//G

#include <stdio.h>
 
// ================== 코드 작성 영역 ==================
 
void int_to_base16str(char* str, unsigned int n)
{
     
    sprintf(str, "%X", n);
}
 
// ===================================================
 
int main(int argc, char const* argv[])
{
    unsigned int n;
    char str[10] = { 0 };
 
    scanf("%u", &n);
    int_to_base16str(str, n);
    printf("%s\n", str);
 
    return 0;
}


//H

#include <stdio.h>
 
// ================== 코드 작성 영역 ==================
void uint2str(char* data)
{
    
    sprintf(data, "%u", *((unsigned int*)data));
}
// ===================================================
 
int main(int argc, char const* argv[]) {
    char str[16] = { 0 };
 
    scanf("%u", (unsigned int*)str);
 
    uint2str(str);
 
    printf("%s", str);
 
    return 0;
}
 


//I

#include <stdio.h>
 
// ================== 코드 작성 영역 ==================
void wordcat(char* wordsequence, char word[3][21], int idx)
{
    int i = 0, j = 0;
 
    
    while (word[idx - 3][i] != '\0')
    {
        wordsequence[j] = word[idx - 3][i];
        i++;
        j++;
    }
 
    i = 0;
 
    while (word[idx - 2][i] != '\0')
    {
        wordsequence[j] = word[idx - 2][i];
        i++;
        j++;
    }
 
    i = 0;
 
 
    while (word[idx - 1][i] != '\0') 
    {
        wordsequence[j] = word[idx - 1][i];
        i++;
        j++;
    }
    wordsequence[j] = '\0';
}
// ===================================================
 
int main()
{
    char word[3][21];
    char wordsequence[63];
    int idx = 3;
 
    for (int i = 0; i < 3; i++)
    {
        scanf("%s", word[i]);
    }
 
    wordcat(wordsequence, word, idx);
 
    printf("%s\n", wordsequence);
 
    return 0;
}


//J

#include <stdio.h>
#include <stdlib.h>
 
int find_alpha_max(char str[][101], int size) {
    int maxCount = 0; 
    int maxIndex = 0; 
 
    for (int i = 0; i < size; ++i)
    {
        int count[26] = { 0 }; 
 
        for (int j = 0; str[i][j] != '\0'; ++j) 
        {
            if (str[i][j] >= 'a' && str[i][j] <= 'z')
            {
                int index = str[i][j] - 'a';
                count[index]++;
                
                if (count[index] > maxCount)
                {
                    maxCount = count[index];
                    maxIndex = i;
                }
            }
        }
    }
 
    return maxIndex;
}
 
int main(int argc, char const* argv[])
{
    char str[3][101] = { 0 };
    gets(str[0]);
    gets(str[1]);
    gets(str[2]);
 
    int n = find_alpha_max(str, 3);
 
    printf("%s", str[n]);
 
    return 0;
}
