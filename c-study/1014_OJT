//A
#include<stdio.h>
int main()
{
    int n;
    char result;
 
    scanf("%d", &n);
 
    result = 122-n;
 
    printf("%c", result);
 
    return 


//B
#include <stdio.h>
 
int main() {
    int x;
     
    scanf("%d", &x);
 
    int position = 0;
    while ((x & 1) == 0) 
    {
         
        x = x >> 1;
        position++;
    }
 
    printf("%d\n", position);
 
    return 0;
}


//C

#include<stdio.h>
int main()
{
    char str[101];
    int result[101] = { 0 };
 
    scanf("%s", str);
    int len = 0;
    while (str[len] != NULL)
    {
        len++;
    }
 
    for (int i = 0; i < len; i++)
    {
        if ('a' <= str[i] && str[i] <= 'z')
        {
            result[str[i] - 'a']++;
        }
 
        else if ('A' <= str[i] && str[i] <= 'Z')
        {
            result[26+str[i] - 'A']++;
        }
    }
     
 
    for (int i = 0; i <52; i++)
    {
        printf("%d ", result[i]);
    }
    return 0;
}


//F
#include <stdio.h>
 
int main() {
    char str[101];
    char str_2[101];
    scanf("%s", str);
    scanf("%s", str_2);
    int len = 0;
    int len_2 = 0;
    while (str[len] != '\0') {
        len++;
    }
    while (str_2[len_2] != '\0') {
        len_2++;
    }
 
    if (len > len_2) {
        printf("%s", str);
    }
    else if (len < len_2) {
        printf("%s", str_2);
    }
    else {
        int compare_result = 0;
        for (int i = 0; i < len; i++) {
            if (str[i] > str_2[i]) {
                compare_result = 1;
                break;
            }
            else if (str[i] < str_2[i]) {
                compare_result = -1;
                break;
            }
        }
        if (compare_result == 1) {
            printf("%s", str);
        }
        else {
            printf("%s", str_2);
        }
    }
 
    return 0;
}

//H

#include<stdio.h>
int main()
{
    unsigned char data;
    int n;
    unsigned char left;
    unsigned char right;
     
    scanf("%hhu %d", &data, &n);
 
    left = (data & 0xf0) >> n;
    right = (data & 0x0f) << n;
 
    printf("%hhu", left | right);
    return 0;
}
